//dfs 깊이우선탐색 - 맹목적으로 각 노드를 탐색
//Stack , 재귀함수사용 
#include <iostream>
#include <vector>
#include <queue>

using namespace std;

int number= 7;
int c[7]; // checked (방문여부)를 표시
vector<int> a[8]; 

void dfs(int x){
	if(c[x]) return; // 방문이 된 노드라면 함수 종료 
	c[x] = true; //처음이라면 방문처리 
	
	cout << x << ' ';
	for(int i=0; i<a[x].size(); i++){
		int y= a[x][i];
		dfs(y);
	}
} 
int main(void){
	//1과 2,3를 연결
	a[1].push_back(2);
	a[1].push_back(3);
	
	//2과 1,3,4,5를 연결
	a[2].push_back(1);
	a[2].push_back(3);
	a[2].push_back(4);
	a[2].push_back(5);
	
	//3과 1,2,6,7를 연결
	a[3].push_back(1);
	a[3].push_back(2);
	a[3].push_back(6);
	a[3].push_back(7); 
	
	//4와 2,5연결
	a[4].push_back(2);
	a[4].push_back(5);
	
	//5와 2,4연결
	a[5].push_back(2);
	a[5].push_back(4);
	
	//6과  3,4연결
	a[6].push_back(3);
	a[6].push_back(7);
	
	//7과  3,6연결  
	a[7].push_back(3);
	a[7].push_back(6);
	
	dfs(1); 
	 
} 
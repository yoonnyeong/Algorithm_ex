/*퀵정렬
분할정복 알고리즘을 사용
log n(거의 상수라고 볼 수 있을 정도로 빠르다) * n  */
//특정한 값을 기준으로 큰 숫자와 작은 숫자를 나누면 ->(가장 앞에 있는 수를 피봇값으로) 기준값 : pivot 
 
/*
3 7 8 1 5 9 6 10 2 4
이미 정렬이 되어있는 경우에는 속도가 느려짐.  <-> 삽입정렬은 정렬이 되어있는 경우 빠름 
자기보다 큰 값과 작은 값이 엇갈릴때까지 반복하는 알고리즘.   
*/ 
#include <stdio.h>

int number = 10;
int data[10]= {1,10,5,8,7,6,4,3,2,9};

void quickSort(int *data, int start, int end){
	if(start >= end){ // 원소가 1개인 경우 
		return;
	}
	int key = start; // 키는 첫번째 원소
	int i = start + 1; // i: 왼쪽 출발 지점 
	int j = end;  // j: 오른쪽 출발 지점
	int temp;
	
	while(i <= j){ //엇갈릴때까지 반복
	 	while(data[i] <= data[key]) { //키 값보다 큰 값을 만날때 까지  
	 		i++;
		 }
		while(data[j] >= data[key] && j > start){
			j--;
		}
		if(i>j){
			temp= data[j];
			data[j]= data[key];
			data[key] = temp;
		}else{
			temp= data[j];
			data[j]= data[i];
			data[i] = temp;
		}
	} 
	quickSort(data, start, j-1);
	quickSort(data, j+1, end);
} 
int main(void){
	quickSort(data, 0, number-1);
	for(int i=0; i<number; i++){
		printf("%d", data[i]);
	}
	return 0;
}
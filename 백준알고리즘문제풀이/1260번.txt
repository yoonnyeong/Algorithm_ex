/*
백준알고리즘 1260번 
bfs, dfs 구현 
*/
#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>

using namespace std;
int n;// 정점의 수
int m; // 간선의 수
int v; //시작할 점

int number = 1001;
bool visit_b[1001]; //bfs 방문 여부를 표시 
bool visit_d[1001]; // dfs 방문 여부를 표시 
vector<int> a[1001];


//dfs 깊이우선 탐색 : 재귀함수  
void dfs(int x){
	if(visit_d[x])  return;
	visit_d[x] = true;
	cout << x << ' ';
	for(int i=0 ; i<a[x].size(); i++){
		int y = a[x][i];
		dfs(y); 
	}
	
} 

//queue사용 : bfs 너비우선탐색  
void bfs(int start){
	queue<int> q;
	q.push(start);
	visit_b[start] = true;
	while(!q.empty()){
		int x = q.front();
		q.pop(); // 큐에서 하나를 꺼냄
		printf("%d ", x);
		for(int i=0; i<a[x].size(); i ++){
			int y = a[x][i];
			if(!visit_b[y]){
				q.push(y);
				visit_b[y]=true;
			}
		} 
	}
}
int main(void){
	//정점, 간선, 출발점을 입력받음. 
	cin >>  n >> m >> v; 
	
	for(int i=1; i<=m; i++){
		int x, y;
		cin >> x >> y;
		a[x].push_back(y);
		a[y].push_back(x);
	}
	
	for(int i=1; i<=n; i++){
		sort(a[i].begin(), a[i].end());
	}
	dfs(v);
	cout << endl;
	bfs(v);
	
	
	return 0;
} 